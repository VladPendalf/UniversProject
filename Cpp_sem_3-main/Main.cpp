#include "Tree.h"

//--------------------------------Моделирование красно-чёрного дерева----------------------------------------------------------------
/*
1) Реализовать класс «Красно-чёрное дерево»

2) Реализовать необходимые для класса функции:
    a)конструкторы +
    b)деструкторы  +
    c)нужные методы:    добавление, +
                        удаление,   +
                        поиск,      +
                        поиск минимума, +
                        максимума   +

3) Добавьте итераторы для перечисления элементов дерева +

4) Оптимизировать построенный код: (открыть свойства проекта и настроить самому) :D
    1) по производительности
    2) по потреблению памяти


----------------------testing-------------------------------
Продемонстрировать работу операций добавления нового элемента, +
                                   поиска элемента,  +
                                   определения минимума и максимума +

Проиллюстрировать оценки решения по памяти и производительности  */

int main()
{
    std::cout << "Start\n";
    std::vector<int> nums{ 10,40,30,60,90,70,20,50,80,100 };
    std::vector<int> nums2{ 10,20,30,40,50,60,70,80,90,100 };
    RBTree tree1(nums2), tree2(nums);
    std::cout << "\nPrint\n";
    //for (auto it = tree1.begin(); it != tree1.end(); ++it)
    //{
      //  std::cout << *it << ' ';
    //}
    if (tree1.Search(35))
        std::cout << std::endl << tree1.Search(35)->_value << std::endl;
    else
        std::cout << "\nElement is not found\n";
    tree1.Remove(30);
    tree1.print();
    tree2.print();
    std::cout << "Min = " << tree1.Min()->_value << "\tMax = " << tree1.Max()->_value << std::endl;
    return 0;
}